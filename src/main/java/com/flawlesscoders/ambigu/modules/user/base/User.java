package com.flawlesscoders.ambigu.user.base;

import java.util.Collection;
import java.util.List;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

@Document(collection = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@Schema(description = "Model that repsents the base user (used for login and related with admin and waiter)")
public abstract class User implements UserDetails {

    @Id
    @Schema(description = "User's id autogenerated by the database")
    private String id;

    @Schema(description = "User's email", example = "example@gmail.com")
    @Email(message = "Ingresa un correo electrónico válido")
    private String email;

    @Schema(description = "User's password")
    @Size(min = 8, message = "La contraseña debe tener al menos 8 caracteres")
    private String password;

    @Schema(description = "User's role")
    @NotNull(message = "El rol es requerido")
    private Role role;

    @Schema(description = "User's name")
    @NotNull(message = "El nombre es requerido")
    private String name;

    @Schema(description = "User's first lastname")
    @NotNull(message = "El apellido paterno es requerido")
    private String lastname_p;

    @Schema(description = "User's second lastname")
    @NotNull(message = "El apellido materno es requerido")
    private String lastname_m;

    @Schema(description = "User's status")
    @NotNull(message = "El estatus es requerido")
    private boolean status;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(() -> "ROLE_" + role.name());
    }

    @Override
    public String getUsername() {
        return email;
    }

    @Override
    public boolean isAccountNonExpired() {
        return status;
    }

    @Override
    public boolean isAccountNonLocked() {
        return status;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return status;
    }

    @Override
    public boolean isEnabled() {
        return status;
    }
}
